spec: v1.0
desc: Catalog with UDP flood attacks.

dataset:
  - input: netDriver
    title: Network driver to use
    defaultValue: bridge

  - const: net
    desc: Data on the network to use.
    value:
      name: udp-flood
      driver: $(netDriver)

  - const: victim
    desc: Victim data, that is, the container to be attacked.
    value:
      container: udp-victim
      image: httpd:alpine
      memory: 6m
      cores: 1
  
  - const: botnet
    desc: Botnet data, that is, the containers of the botnet.
    value:
      size: 5 # number of bots
      broker:
        container: redis
        image: redis:alpine
      mgr:
        container: carboni
        image: akromio/carboni:latest
      bot:
        container: cavani
        image: akromio/cavani:latest
        msg:
          count: 15000 # messages/bot to send
          size:
            min: 29000
            max: 30000

plugins:
  - plugin: redis
    ini:
      host: localhost
      port: 6379

jobs:
  - group: env
    jobs:
      - macro: create-env
        title: Create the Docker environment
        steps:
          - create-net
          - create-victim
          - create-botnet

      - macro: remove-env
        title: Remove the Docker environment
        steps:
          - remove-botnet
          - remove-victim
          - remove-net

  - group: net
    jobs:
      - macro: create-net
        title: Create the Docker network
        steps:
          - sudo: docker network create $(net.name) -d $(net.driver)

      - macro: remove-net
        title: Remove the Docker network
        steps:
          - sudo: docker network rm $(net.name)

  - group: victim
    jobs:
      - macro: create-victim
        title: Create the victim container
        ini: exec sudo docker pull $(victim.image)
        dataset:
          - const: network
            value: --network $(net.name)
          - const: memory
            value: --memory=$(victim.memory)
          - const: cpus
            value: --cpus=0.25 --cpuset-cpus=$(victim.cores)
          - const: name
            value: --name $(victim.container)
          - const: mount
            value: -v /usr/share/doc/gdisk:/usr/local/apache2/htdocs/
        steps:
          - sudo: docker run $(name) $(cpus) $(memory) $(network) $(mount) -p 8080:80 -d $(victim.image)
          - show-victim-conf

      - macro: show-victim-conf
        title: Show the victim conf
        steps:
          - log: exec sudo docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(victim.container)
          - log: exec sudo docker exec -i $(victim.container) sysctl net.core.somaxconn && cat /proc/meminfo | grep MemTotal

      - macro: remove-victim
        title: Remove the victim container
        steps:
          - sudo: docker rm -f $(victim.container)

  - group: botnet
    dataset:
      - const: network
        desc: Network option for docker run.
        value: --network=$(net.name)
      - const: volume
        desc: Volume option for docker run
        value: -v $(workDir)/registry:/registry
    jobs:
      - macro: create-botnet
        title: Create the botnet
        steps:
          - create-broker
          - create-bots
          - create-mgr
      
      - macro: remove-botnet
        title: Remove the botnet
        steps:
          - remove-bots
          - remove-mgr
          - remove-broker
      
      - macro: create-broker
        title: Create the broker of the botnet
        # ini:
        #   - sudo: docker pull $(botnet.broker.image)
        steps:
          - sudo: docker run --name $(botnet.broker.container) $(network) --rm -d -p 6379:6379 $(botnet.broker.image)
          - sleep 1s
          - redis.ping
      
      - macro: remove-broker
        title: Remove the broker of the botnet
        steps:
          - sudo: docker rm -f $(botnet.broker.container)
      
      - macro: create-mgr
        title: Create the manager of the botnet
        dataset:
          - const: name
            value: $(botnet.mgr.container)
          - const: image
            value: $(botnet.mgr.image)
        ini: exec sudo docker pull $(botnet.mgr.image)
        steps:
          - sudo: docker run --name $(name) $(network) $(volume) --rm -d $(image) carboni r -n $(name) pause warmup load exit
          - sudo: docker exec -i $(name) redis-cli -h $(botnet.broker.container) redis-cli PING
      
      - macro: remove-mgr
        title: Remove the manager of the botnet
        steps:
          - sudo: docker rm $(botnet.mgr.container)
      
      - macro: create-bots
        title: Create the bot containers
        # ini: exec sudo docker pull $(botnet.bot.image)
        forEach: $i = range 1 $(botnet.size)
        steps:
          - quiet: $name = text $(botnet.bot.container)$(i)
          - log: redis.xgroup.create $(name) $(name) $ MKSTREAM
          - sudo: docker run --name $(name) $(network) $(volume) --rm -d $(botnet.bot.image) cavani r
          - sudo: docker exec -i $(botnet.bot.container) redis-cli -h $(botnet.broker.container) PING

      - macro: remove-bots
        title: Remove the bot containers
        forEach: $i = range 1 $(botnet.size)
        steps:
          - quiet: $name = text $(botnet.bot.container)$(i)
          - log: redis.xgroup.destroy $(name) $(name)
          - sudo: docker rm -f $(name)

  - macro: latency
    title: Check latency to victim
    forEach: $i = range 1 300
    steps:
      - exec.log curl http_://localhost:8080 -o /dev/null -s -w %{time_total}
      - sleep 2s
